syntax = "proto3";

import "Types.proto";
import "Validator.proto";

// ClientState from Tendermint tracks the current validator set, latest height,
// and a possible frozen height.
message ClientState {
  string chain_id = 1;
  Fraction trust_level = 2;
  // duration of the period since the LastestTimestamp during which the
  // submitted headers are valid for upgrade
  int64 trusting_period = 3;
  // duration of the staking unbonding period
  int64 unbonding_period = 4;
  // defines how much new (untrusted) header's Time can drift into the future.
  int64 max_clock_drift = 5;
  // latest height the client was updated to
  Height latest_height = 6;
  // period of transaction confirmation delay
  uint64 time_delay = 7;
}

// ConsensusState defines the consensus state from Tendermint.
message ConsensusState {
  // timestamp that corresponds to the block height in which the ConsensusState
  // was stored.
  Timestamp timestamp = 1;
  // commitment root (i.e app hash)
  bytes root = 2;
  bytes next_validators_hash = 3;
}

// Header defines the Tendermint client consensus Header.
// It encapsulates all the information necessary to update from a trusted
// Tendermint ConsensusState. The inclusion of TrustedHeight and
// TrustedValidators allows this update to process correctly, so long as the
// ConsensusState for the TrustedHeight exists, this removes race conditions
// among relayers The SignedHeader and ValidatorSet are the new untrusted update
// fields for the client. The TrustedHeight is the height of a stored
// ConsensusState on the client that will be used to verify the new
// untrusted header. The Trusted ConsensusState must be within the unbonding
// period of current time in order to correctly verify, and the
// TrustedValidators must hash to TrustedConsensusState.NextValidatorsHash
// since that is the last trusted validator set at the TrustedHeight.
message Header {
  SignedHeader signed_header = 1;
  ValidatorSet validator_set = 2;
  Height trusted_height = 3;
  ValidatorSet trusted_validators = 4;
}

// Fraction defines the protobuf message type for tmmath.Fraction that only
// supports positive values.
message Fraction {
  uint64 numerator = 1;
  uint64 denominator = 2;
}